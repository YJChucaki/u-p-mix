
using ApproxOperator, Tensors,  LinearAlgebra, Printf
include("import_plate_with_hole.jl")
include("wirteVTK.jl")
# for i=2:10
   
ndiv = 16
# ndiv2 =4
# n‚Çö =140
# println(n‚Çö)
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
# elements,nodes= import_patchtest_fem("./msh/plate_with_hole_quad_"*string(ndiv)*".msh")
elements,nodes= import_patchtest_Q4P1("./msh/plate_with_hole_quad_"*string(ndiv)*".msh")
# elements,nodes= import_patchtest_fem("./msh/plate_with_hole_new_quad_"*string(ndiv)*".msh")
# elements,nodes= import_patchtest_fem("./msh/plate_with_hole.msh")
n·µ§ = length(nodes)
# n‚Çë = length(elements["Œ©"])
# n‚Çë‚Çö = length(Œ©)


set‚àáùù≠!(elements["Œ©"])

setùù≠!(elements["Œì¬π·µó"])
setùù≠!(elements["Œì¬≤·µó"])
setùù≠!(elements["Œì¬π·µç"])
setùù≠!(elements["Œì¬≤·µç"])
setùù≠!(elements["Œì¬≥·µç"])
D=1   #thermal conductivity coefficient
t=1 #thickness
R = 1.0
r(x,y) = (x^2+y^2)^0.5
Œ∏(x,y) = atan(y/x)             
a‚ÇÄ = 249.9977
a‚ÇÅ = 24.23894
a‚ÇÇ = 0.000025
a‚ÇÉ = -0.141899
a‚ÇÑ = 0.00007

# T(x,y) = 0.5*a‚ÇÄ+a‚ÇÅ*(r(x,y)+R^2/r(x,y))*cos(Œ∏(x,y))+a‚ÇÇ*(r(x,y)^2+R^4/r(x,y)^2)*cos(2*Œ∏(x,y))+a‚ÇÉ*(r(x,y)^3+R^6/r(x,y)^3)*cos(3*Œ∏(x,y))+a‚ÇÑ*(r(x,y)^4+R^8/r(x,y)^4)*cos(4*Œ∏(x,y))
T(x,y) = 0.5*a‚ÇÄ+a‚ÇÅ*(r(x,y)+R^2/r(x,y))*cos(Œ∏(x,y))
‚àÇT‚àÇx(x,y) = a‚ÇÅ*(x/(x^2+y^2)^0.5-x/(x^2+y^2)^1.5)/(1+y^2/x^2)^0.5+a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)*y^2/((1+y^2/x^2)^1.5*x^3)
‚àÇT‚àÇy(x,y) = a‚ÇÅ*(y/(x^2+y^2)^0.5-y/(x^2+y^2)^1.5)/(1+y^2/x^2)^0.5-a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)*y/((1+y^2/x^2)^1.5*x^2)
P‚ÇÅ(x,y) = -‚àÇT‚àÇx(x,y)
P‚ÇÇ(x,y) = -‚àÇT‚àÇy(x,y)
‚àÇ¬≤T‚àÇx¬≤(x,y)  = a‚ÇÅ*(-x^2/(x^2+y^2)^1.5+1/(x^2+y^2)^0.5+3*x^2/(x^2+y^2)^2.5-1/(x^2+y^2)^1.5)/(1+y^2/x^2)^0.5 + 2*a‚ÇÅ*(x/(x^2+y^2)^0.5-x/(x^2+y^2)^1.5)*y^2/(1+y^2/x^2)^1.5/x^3+3*a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)*y^4/(1+y^2/x^2)^2.5/x^6-3*a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)*y^2/(1+y^2/x^2)^1.5/x^4
‚àÇ¬≤T‚àÇy¬≤(x,y)  = a‚ÇÅ*(-y^2/(x^2+y^2)^1.5+1/(x^2+y^2)^0.5+3*y^2/(x^2+y^2)^2.5-1/(x^2+y^2)^1.5)/(1+y^2/x^2)^0.5 - 2*a‚ÇÅ*(y/(x^2+y^2)^0.5-y/(x^2+y^2)^1.5)*y/(1+y^2/x^2)^1.5/x^2+3*a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)*y^2/(1+y^2/x^2)^2.5/x^4-a‚ÇÅ*((x^2+y^2)^0.5+1/(x^2+y^2)^0.5)/(1+y^2/x^2)^1.5/x^2
b(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))
# b(x,y) = 0.0 
# n = 1
# T(x,y) = (x+y)^n
# ‚àÇT‚àÇx(x,y) = n*(x+y)^abs(n-1)
# ‚àÇT‚àÇy(x,y) = n*(x+y)^abs(n-1)
# P‚ÇÅ(x,y) = -‚àÇT‚àÇx(x,y)
# P‚ÇÇ(x,y) = -‚àÇT‚àÇy(x,y)
# ‚àÇ¬≤T‚àÇx¬≤(x,y)  = n*(n-1)*(x+y)^abs(n-2)
# ‚àÇ¬≤T‚àÇy¬≤(x,y) = n*(n-1)*(x+y)^abs(n-2)
# b(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))


eval(prescribeForFem)

ops = [
       Operator{:‚à´vtdŒì}(),
       Operator{:‚à´T·µ¢g·µ¢ds}(:Œ±=>1e12*D,:t=>t),
       Operator{:‚à´vbdŒ©}(),
       Operator{:L‚ÇÇ}(),
       Operator{:L‚ÇÇ_heat_flux}(),
       Operator{:‚à´‚à´‚àáT·µ¢D‚àáT‚±ºdxdy}(:D=>D,:t=>t),
]


k·µÖ = zeros(n·µ§,n·µ§)
f·µÖ = zeros(n·µ§)
k = zeros(n·µ§,n·µ§)
f = zeros(n·µ§)


ops[6](elements["Œ©"],k)
ops[3](elements["Œ©"],f)
ops[2](elements["Œì¬π·µç"],k·µÖ,f)
ops[2](elements["Œì¬≤·µç"],k·µÖ,f)
ops[2](elements["Œì¬≥·µç"],k·µÖ,f)
ops[2](elements["Œì¬π·µó"],k·µÖ,f)
# ops[2](elements["Œì¬≤·µó"],k·µÖ,f)
# ops[1](elements["Œì¬≤·µç"],f)
d = (k+k·µÖ)\f #temperatures
push!(nodes,:d=>d)
# p‚ÇÅ = zeros(n·µ§)
# p‚ÇÇ = zeros(n·µ§)
# for ap in elements["Œ©"]
#        ùìí = ap.ùìí
#        ùìñ = ap.ùìñ
       
#        for (i,Œæ) in enumerate(ùìñ)
#                B‚ÇÅ = Œæ[:‚àÇùù≠‚àÇx]
#                B‚ÇÇ = Œæ[:‚àÇùù≠‚àÇy]
#                for (j,x‚±º) in enumerate(ùìí)
#                    I = x‚±º.ùêº
#                    p‚ÇÅ[I] -= B‚ÇÅ[j]*x‚±º.d
#                    p‚ÇÇ[I] -= B‚ÇÇ[j]*x‚±º.d
#                end 
#        end
#    end
#    push!(nodes,:d‚ÇÅ=>p‚ÇÅ,:d‚ÇÇ=>p‚ÇÇ)


set‚àáùù≠!(elements["Œ©·µç"])
set‚àáùù≠!(elements["Œ©·µç·µñ"])
l2_u= ops[4](elements["Œ©·µç"])
l2_p= ops[5](elements["Œ©·µç"])

L2_u = log10(l2_u)
L2_p = log10(l2_p)
     
println(L2_u)
println(L2_p)
           


# eval(VTK_mix_pressure)

# d‚Çö·µ§ = zeros(2*n‚Çö + n·µ§)
# d‚Çö = zeros(2*n‚Çö)
# d·µ§ = zeros(n·µ§)
# for (i,node) in enumerate(nodes)
#     x = node.x
#     y = node.y
#     d‚Çö·µ§[2*i-1] = -‚àÇT‚àÇx(x,y)
#     d‚Çö·µ§[2*i]   = -‚àÇT‚àÇy(x,y)
#     d‚Çö[2*i-1] = -‚àÇT‚àÇx(x,y)
#     d‚Çö[2*i]   = -‚àÇT‚àÇy(x,y)
# end
# for (i,node) in enumerate(nodes_u)
#     x = node.x
#     y = node.y
#     d‚Çö·µ§[2*n‚Çö+i] = T(x,y)
#     d·µ§[i] = T(x,y)
# end

# err1 = k‚Çö‚Çö*d‚Çö - k‚Çö·µ§*d·µ§
# err2 = k‚Çö‚Çô*d·µ§ + f‚Çö
# err3 = (k‚Çö·µ§+k‚Çö‚Çô)'*d‚Çö-f·µ§
# err4 = k‚Çö‚Çö*d‚Çö - (k‚Çö·µ§+k‚Çö‚Çô)*d·µ§ + f‚Çö
# err5 = k*d‚Çö·µ§-f
# err6 = k*d-f
