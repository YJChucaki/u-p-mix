using ApproxOperator, Tensors, JLD,LinearAlgebra, GLMakie, CairoMakie, Printf,Pardiso

ndiv=8
i=200
# ndiv_p=4 
include("import_prescrible_ops.jl")                       
include("import_cantilever.jl")
include("wirteVTK.jl")
elements, nodes ,nodes_p,Œ©,x·µñ,y·µñ,z·µñ, sp,type = import_cantilever_mix("./msh/cantilever_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p,Œ© = import_cantilever_mix_internal("./msh/cantilever_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*"_internal.msh","./msh/cantilever_"*string(ndiv)*"_internal.msh")
# elements, nodes ,nodes_p ,Œ©= import_cantilever_mix("./msh/cantilever_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p,Œ© = import_cantilever_mix("./msh/cantilever_quad_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p,Œ© = import_cantilever_mix("./msh/cantilever_HR_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p = import_cantilever_T6P3("./msh/cantilever_tri6_"*string(ndiv)*".msh","./msh/cantilever_"*string(ndiv)*".msh")
# elements, nodes  = import_cantilever_Q4P1("./msh/cantilever_quad_"*string(ndiv)*".msh")
# elements, nodes  = import_cantilever_Q4R1("./msh/cantilever_quad_"*string(ndiv)*".msh")
# elements, nodes ,nodes_p ,x·µñ,y·µñ,z·µñ, sp,type= import_cantilever_mix("./msh/cantilever_tri6_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes  = import_cantilever_Q8P3("./msh/cantilever_quad8_"*string(ndiv)*".msh")
# elements, nodes  = import_cantilever_fem("./msh/cantilever_quad8_"*string(ndiv)*".msh")
    n·µ§ = length(nodes)
    n‚Çö = length(nodes_p)
    n‚Çë = length(elements["Œ©"])
    n‚Çë‚Çö = length(Œ©)
    ##for Q4P1 
    # n‚Çö = length(elements["Œ©·µñ"])
    ##for Q8P3
    # n‚Çö = 3*length(elements["Œ©·µñ"])
    P = 1000
    EÃÑ = 3e6
    # EÃÑ = 1.0
    ŒΩÃÑ = 0.4999999
    # ŒΩÃÑ = 0.3
    E = EÃÑ/(1.0-ŒΩÃÑ^2)
    ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)
    L = 48
    D = 12
    I = D^3/12
    EI = E*I
    K=EÃÑ/3/(1-2ŒΩÃÑ )
    eval(prescribeForGauss)
    eval(prescribeForPenalty)
    setùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©·µç"])
    setùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç"])
    setùù≠!(elements["Œì·µó"])
    #  setùù≠!(elements["Œì·µç·µñ"])
   
    eval(opsupmix)
    k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
    k‚Çö·µ§ = zeros(n‚Çö,2*n·µ§)
    k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
    f = zeros(2*n·µ§)
    fp= zeros(n‚Çö)
    opsup[3](elements["Œ©"],k·µ§·µ§)
    opsup[4](elements["Œ©"],elements["Œ©·µñ"],k‚Çö·µ§)
    opsup[5](elements["Œ©·µñ"],k‚Çö‚Çö)
    opsup[6](elements["Œì·µó"],f)

    Œ±·µ• = 1e9
    eval(opsPenalty)
    opsŒ±[1](elements["Œì·µç"],k·µ§·µ§,f)



    k = [k·µ§·µ§ k‚Çö·µ§';k‚Çö·µ§ k‚Çö‚Çö]
    f = [f;fp]
    d = k\f
    d‚ÇÅ = d[1:2:2*n·µ§]
    d‚ÇÇ = d[2:2:2*n·µ§]
    q  = d[2*n·µ§+1:end]
    push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
    push!(nodes_p,:q=>q)


# # # exact solution contour
# K=EÃÑ/3/(1-2ŒΩÃÑ )
# G=EÃÑ/2/(1+ŒΩÃÑ )
# pÃÑ = zeros(n‚Çö)
# i=0.0
# for p in nodes_p
#     i= p.ùêº
#     Œæ¬π = p.x
#     Œæ¬≤ = p.y
#     ‚àÇuÃÑ‚ÇÅ‚àÇx = -P/EI*(L-Œæ¬π)*Œæ¬≤
#     ‚àÇuÃÑ‚ÇÅ‚àÇy = -P/6/EI*((6*L-3*Œæ¬π)*Œæ¬π + (2+ŒΩ )*(3*Œæ¬≤^2-D^2/4))
#     ‚àÇuÃÑ‚ÇÇ‚àÇx = P/6/EI*((6*L-3*Œæ¬π)*Œæ¬π - 3*ŒΩ *Œæ¬≤^2 + (4+5*ŒΩ )*D^2/4)
#     ‚àÇuÃÑ‚ÇÇ‚àÇy = P/EI*(L-Œæ¬π)*Œæ¬≤*ŒΩ 
#     ŒµÃÑ‚ÇÅ‚ÇÅ = ‚àÇuÃÑ‚ÇÅ‚àÇx
#     ŒµÃÑ‚ÇÇ‚ÇÇ = ‚àÇuÃÑ‚ÇÇ‚àÇy
#     pÃÑ[i]= K*(ŒµÃÑ‚ÇÅ‚ÇÅ+ŒµÃÑ‚ÇÇ‚ÇÇ)
# end
# push!(nodes_p,:q=>pÃÑ)

    h1,l2,h1_dil,h1_dev = opsup[8](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
    # h1,l2 = opsup[9](elements["Œ©·µç"])
    L2 = log10(l2)
    H1 = log10(h1)
    # # H1_dil = log10(h1_dil)
    # # H1_dev = log10(h1_dev)
    println(L2,H1)
    # println(H1_dil,H1_dev)
   
    eval(VTK_mix_pressure)
    # eval(VTK_mix_pressure_exact_solution)
    # eval(VTK_mix_displacement)
    # eval(VTK_Q4P1_displacement_pressure)
    # eval(VTK_T6P3_pressure)
