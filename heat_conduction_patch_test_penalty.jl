
using ApproxOperator, Tensors,  LinearAlgebra, Printf
include("import_heat_conduction.jl")
include("wirteVTK.jl")
# for i=2:10
   
ndiv =17
# println(n‚Çö)
elements,nodes = import_patchtest_fem("./msh/patchtest_tri6_"*string(ndiv)*".msh")
n·µ§ = length(nodes)
n‚Çë = length(elements["Œ©"])
# n‚Çë‚Çö = length(Œ©)


set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì"])
D=1   #thermal conductivity coefficient
t=1 #thickness

n = 1
T(x,y) = (x+y)^n
‚àÇT‚àÇx(x,y) = n*(x+y)^abs(n-1)
‚àÇT‚àÇy(x,y) = n*(x+y)^abs(n-1)
‚àÇ¬≤T‚àÇx¬≤(x,y)  = n*(n-1)*(x+y)^abs(n-2)
‚àÇ¬≤T‚àÇy¬≤(x,y) = n*(n-1)*(x+y)^abs(n-2)
s(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))

eval(prescribeForFem)

ops = [
       Operator{:‚à´T·µ¢h·µ¢ds}(:t=>t),
       Operator{:‚à´T·µ¢g·µ¢ds}(:Œ±=>1e12*D,:t=>t),
       Operator{:‚à´‚à´T·µ¢s·µ¢dxdy}(:t=>t),
       Operator{:T_error}(:D=>D,:t=>t),
       Operator{:‚à´‚à´‚àáT·µ¢D‚àáT‚±ºdxdy}(:D=>D,:t=>t),
]


k·µÖ = zeros(n·µ§,n·µ§)
f·µÖ = zeros(n·µ§)
k = zeros(n·µ§,n·µ§)
f = zeros(n·µ§)


ops[5](elements["Œ©"],k)
ops[3](elements["Œ©"],f)
ops[2](elements["Œì"],k·µÖ,f)

q = (k+k·µÖ)\f #temperatures

push!(nodes,:T=>q)


setùù≠!(elements["Œ©·µç"])
l2= ops[4](elements["Œ©·µç"])
# h1,l2,h1_dil,h1_dev= ops[5](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
L2 = log10(l2)
# H1 = log10(h1)
# H1_dil = log10(h1_dil)
# H1_dev = log10(h1_dev)
           
println(L2)

# eval(VTK_mix_pressure)


