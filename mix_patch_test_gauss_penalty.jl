
using ApproxOperator, Tensors, JLD

# ndiv= 11
 ndiv_p= 11
 i=80
# 40,60-3
# 80-4
# 100,120-5
# 160,200-7

include("import_prescrible_ops.jl")
include("import_patch_test.jl")
# elements, nodes ,nodes_p,x·µñ,y·µñ,z·µñ, sp,type = import_cantilever_mix_tri3("./msh/cantilever_"*string(ndiv)*".msh","./msh/cantilever_"*string(ndiv_p)*".msh")
# elements, nodes ,nodes_p = import_cantilever_mix_quad4("./msh/cantilever_quad_"*string(ndiv)*".msh","./msh/cantilever_quad_"*string(ndiv_p)*".msh")
elements, nodes ,nodes_p ,x·µñ,y·µñ,z·µñ, sp,type= import_cantilever_mix_tri3("./msh/patchtest.msh","./msh/patchtest_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p,x·µñ,y·µñ,z·µñ, sp,type = import_cantilever_mix_quad4("./msh/cantilever_quad_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
    n·µ§ = length(nodes)
    n‚Çö = length(nodes_p)
    n‚Çò=21
    s =1.5*12/ndiv_p*ones(n‚Çö)
    P = 1000
    EÃÑ = 3e6
    ŒΩÃÑ = 0.4999999
    # ŒΩÃÑ = 0.3
    E = EÃÑ/(1.0-ŒΩÃÑ^2)
    ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)
    L = 48
    D = 12
    I = D^3/12
    EI = E*I
    K=EÃÑ/3/(1-2ŒΩÃÑ )
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

    u(x,y) = x+y
    ‚àÇu‚àÇx(x,y) = 1.0
    ‚àÇu‚àÇy(x,y) = 1.0
    v(x,y) = x+y
    ‚àÇv‚àÇx(x,y) = 1.0
    ‚àÇv‚àÇy(x,y) = 1.0

   eval(prescribeForGauss)
   eval(prescribeForPenalty)
#    eval(prescribeVariables)
#    eval(opsGauss)
setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©·µñ"])
setùù≠!(elements["Œ©·µç·µñ"])
setùù≠!(elements["Œì¬π"])
setùù≠!(elements["Œì¬≤"])
setùù≠!(elements["Œì¬≥"])
setùù≠!(elements["Œì‚Å¥"])

eval(opsupmix)
k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
k·µ§‚Çö = zeros(2*n·µ§,n‚Çö)
k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
f = zeros(2*n·µ§)
fp= zeros(n‚Çö)
opsup[3](elements["Œ©"],k·µ§·µ§)
opsup[4](elements["Œ©"],elements["Œ©·µñ"],k·µ§‚Çö)
opsup[5](elements["Œ©·µñ"],k‚Çö‚Çö)
# opsup[6](elements["Œì·µó"],f)

Œ±·µ• = 1e9
eval(opsPenalty)

opsŒ±[1](elements["Œì¬π"],k·µ§·µ§,f)
opsŒ±[1](elements["Œì¬≤"],k·µ§·µ§,f)
opsŒ±[1](elements["Œì¬≥"],k·µ§·µ§,f)
opsŒ±[1](elements["Œì‚Å¥"],k·µ§·µ§,f)


k = [k·µ§·µ§ k·µ§‚Çö;k·µ§‚Çö' k‚Çö‚Çö]
f = [f;fp]

d = k\f
d‚ÇÅ = d[1:2:2*n·µ§]
d‚ÇÇ = d[2:2:2*n·µ§]
q  = d[2*n·µ§+1:end]
push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
push!(nodes_p,:q=>q)

# @save compress=true "jld/patchtest_gauss_penalty.jld" d‚ÇÅ d‚ÇÇ d‚ÇÉ

set‚àáùù≠!(elements["Œ©·µç"])
h1,l2,h1_dil,h1_dev = opsup[8](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
# h1,l2,h1_dil,h1_dev = opsup[8](elements["Œ©"],elements["Œ©·µñ"])
L2 = log10(l2)
H1 = log10(h1)
H1_dil = log10(h1_dil)
H1_dev = log10(h1_dev)
# h = log10(12.0/ndiv)
println(L2,H1)
println(H1_dil,H1_dev)