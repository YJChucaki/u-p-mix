
using Statistics , DelimitedFiles
import Gmsh: gmsh

function import_cantilever_Q4P1(filename::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()
    integrationOrder_Œ© = 1
    integrationOrder_Œ©·µç = 10
    integrationOrder_Œì = 1
    gmsh.open(filename)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    elements["Œ©"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    type = PiecewisePolynomial{:Constant2D}
    # type = PiecewiseParametric{:Constant2D}
    elements["Œ©·µñ"] = getPiecewiseElements( entities["Œ©"], type, integrationOrder_Œ©;)
    elements["Œ©·µç·µñ"] = getPiecewiseElements( entities["Œ©"], type,  integrationOrder_Œ©·µç;)
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†)
    
    return elements, nodes
end
function import_cantilever_Q8P3(filename::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    gmsh.initialize()
    integrationOrder_Œ© = 4
    integrationOrder_Œ©·µç = 10
    integrationOrder_Œì = 4
    gmsh.open(filename)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    elements["Œ©"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    type = PiecewisePolynomial{:Linear2D}
    elements["Œ©·µñ"] = getPiecewiseElements( entities["Œ©"], type, integrationOrder_Œ© )
    elements["Œ©·µç·µñ"] =getPiecewiseElements( entities["Œ©"], type,  integrationOrder_Œ©·µç)
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†)
    
    # gmsh.finalize()
    return elements, nodes
end
function import_cantilever_mix(filename1::String,filename2::String)
    gmsh.initialize()
    gmsh.open(filename1)

    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 6
    integrationOrder_Œì = 6
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    # elements["Œì‚ÇÅ"] = getElements(nodes, entities["Œì‚ÇÅ"],   integrationOrder_Œì)
    # elements["Œì‚ÇÉ"] = getElements(nodes, entities["Œì‚ÇÉ"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # push!(elements["Œì‚ÇÅ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # push!(elements["Œì‚ÇÉ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    
    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 1.5*s*ones(length(nodes_p))
    # s =1.8*12/ndiv_p*ones(length(nodes_p))
    # s = 1.3/10*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    gmsh.open(filename1)
    entities = getPhysicalGroups()
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"], type,  integrationOrder_Œì, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    n‚Çò=21
    ùó† = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇx = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇy = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # gmsh.finalize()
    return elements, nodes, nodes_p,Œ©,x·µñ,y·µñ,z·µñ, sp,type
end
function import_cantilever_reduce(filename1::String)
    gmsh.initialize()
    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 4
    integrationOrder_Œì = 4
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    # elements["Œì‚ÇÅ"] = getElements(nodes, entities["Œì‚ÇÅ"],   integrationOrder_Œì)
    # elements["Œì‚ÇÉ"] = getElements(nodes, entities["Œì‚ÇÉ"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # push!(elements["Œì‚ÇÅ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # push!(elements["Œì‚ÇÉ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    integrationOrder_1 = 0
    elements["Œ©·µõ"] =getElements(nodes, entities["Œ©"],   integrationOrder_1)
    # elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"], type,  integrationOrder_Œì, sp)
    push!(elements["Œ©·µõ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)

    # gmsh.finalize()
    return elements, nodes, nodes_p
end

function import_cantilever_mix_HR(filename1::String,filename2::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    integrationOrder_Œ© = 10
    integrationOrder_Œì = 10
    integrationOrder_Œ©·µç = 10

    gmsh.initialize()

    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 1.5*s*ones(length(nodes_p))
    # s = 2.5*s*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    elements["Œ©"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"], integrationOrder_Œì, normal = true)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"], integrationOrder_Œì, normal = true)
    
    
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    
    # type = PiecewisePolynomial{:Constant2D}
    type = PiecewisePolynomial{:Linear2D}
    elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], type, integrationOrder_Œ©)
    elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], type, integrationOrder_Œì)
    elements["ŒìÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    push!(elements["Œ©À¢"], :ùù≠=>:ùë†)
    push!(elements["‚àÇŒ©À¢"], :ùù≠=>:ùë†)

    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type, integrationOrder_Œ©, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    elements["Œì·µñ"] = getElements(nodes_p, entities["Œì·µç"], type, integrationOrder_Œì, sp)
    
    n‚Çò = 6
    # n‚Çò = 21
    ùó† = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†)
    push!(elements["Œì·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œì·µñ"], :ùó†=>ùó†)
   

    return elements, nodes, nodes_p, Œ©
end

function import_cantilever_mix_bubble(filename1::String,filename2::String)
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    integrationOrder_Œ© = 8
    integrationOrder_Œì = 8
    integrationOrder_Œ©·µç = 10

    gmsh.initialize()

    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 1.5*s*ones(length(nodes_p))
    # s = 2.5*s*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

    gmsh.open(filename1)
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()

    elements["Œ©"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"], integrationOrder_Œ©·µç)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"], integrationOrder_Œì, normal = true)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"], integrationOrder_Œì, normal = true)
    
    
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    
    # # type = PiecewisePolynomial{:Constant2D}
    # type = PiecewisePolynomial{:Linear2D}
    # elements["Œ©À¢"] = getPiecewiseElements(entities["Œ©"], type, integrationOrder_Œ©)
    # elements["‚àÇŒ©À¢"] = getPiecewiseBoundaryElements(entities["Œì"], entities["Œ©"], type, integrationOrder_Œì)
    # elements["ŒìÀ¢"] = getElements(entities["Œì·µç"],entities["Œì"], elements["‚àÇŒ©À¢"])
    # push!(elements["Œ©À¢"], :ùù≠=>:ùë†)
    # push!(elements["‚àÇŒ©À¢"], :ùù≠=>:ùë†)

    
    # type = PiecewiseParametric{:Bubble,:Tri3}
      type = PiecewiseParametric{:Bubble,:Quad}
    elements["Œ©·µá"] = getPiecewiseElements(entities["Œ©"], type, integrationOrder_Œ©)
    push!(elements["Œ©·µá"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)

    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type, integrationOrder_Œ©, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    elements["Œì·µñ"] = getElements(nodes_p, entities["Œì·µç"], type, integrationOrder_Œì, sp)
    
    n‚Çò = 6
    # n‚Çò = 21
    ùó† = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†)
    push!(elements["Œì·µñ"], :ùù≠=>:ùë†)
    push!(elements["Œì·µñ"], :ùó†=>ùó†)
   

    return elements, nodes, nodes_p, Œ©
end

function import_cantilever_mix_internal(filename1::String,filename2::String,filename3::String)
    gmsh.initialize()
    gmsh.open(filename1)

    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 5
    integrationOrder_Œì = 5
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    
    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 2.5*s*ones(length(nodes_p))
    # s =1.8*12/ndiv_p*ones(length(nodes_p))
    # s = 1.3/10*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)
    gmsh.open(filename3)
 
    entities = getPhysicalGroups()
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"], type,  integrationOrder_Œì, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    n‚Çò=21
    ùó† = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇx = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇy = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # gmsh.finalize()
    return elements, nodes, nodes_p,Œ©
end
function import_cantilever_mix_LM(filename1::String,filename2::String,filename3::String)
    gmsh.initialize()
    gmsh.open(filename1)

    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 5
    integrationOrder_Œì = 5
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    gmsh.open(filename3)
    nodes_Œª = getùëø·µ¢()
    x_Œª = nodes_Œª.x
    y_Œª = nodes_Œª.y
    z_Œª = nodes_Œª.z
    elements["Œì_Œª"] = getElements(nodes_Œª, entities["Œì·µç"],   integrationOrder_Œì)
    push!(elements["Œì_Œª"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 1.5*s*ones(length(nodes_p))
    # s =1.8*12/ndiv_p*ones(length(nodes_p))
    # s = 1.3/10*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)

    gmsh.open(filename1)
 
    entities = getPhysicalGroups()
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"], type,  integrationOrder_Œì, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    n‚Çò=21
    ùó† = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇx = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇy = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # gmsh.finalize()
    return elements, nodes, nodes_p,Œ©,x·µñ,y·µñ,z·µñ, sp,type
end
function import_cantilever_mix_LM_internal(filename1::String,filename2::String,filename3::String,filename4::String)
    gmsh.initialize()
    gmsh.open(filename1)

    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 5
    integrationOrder_Œì = 5
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    gmsh.open(filename3)
    nodes_Œª = getùëø·µ¢()
    x_Œª = nodes_Œª.x
    y_Œª = nodes_Œª.y
    z_Œª = nodes_Œª.z
    elements["Œì_Œª"] = getElements(nodes_Œª, entities["Œì·µç"],   integrationOrder_Œì)
    push!(elements["Œì_Œª"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    Œ© = getElements(nodes_p, entities["Œ©"])
    s, varùê¥ = cal_area_support(Œ©)
    s = 1.5*s*ones(length(nodes_p))
    # s =1.8*12/ndiv_p*ones(length(nodes_p))
    # s = 1.3/10*ones(length(nodes_p))
    push!(nodes_p,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
    # type = ReproducingKernel{:Quadratic2D,:‚ñ°,:CubicSpline}
    type = ReproducingKernel{:Linear2D,:‚ñ°,:CubicSpline}
    sp = RegularGrid(x·µñ,y·µñ,z·µñ,n = 3,Œ≥ = 5)

    gmsh.open(filename4)
 
    entities = getPhysicalGroups()
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©, sp)
    # elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"], type,  integrationOrder_Œì, sp)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"], type,  integrationOrder_Œ©·µç, sp)
    n‚Çò=21
    ùó† = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇx = (0,zeros(n‚Çò))
    ‚àÇùó†‚àÇy = (0,zeros(n‚Çò))
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùó†=>ùó†, :‚àÇùó†‚àÇx=>‚àÇùó†‚àÇx, :‚àÇùó†‚àÇy=>‚àÇùó†‚àÇy)
    # gmsh.finalize()
    return elements, nodes, nodes_p,Œ©
end

function import_cantilever_T6P3(filename1::String,filename2::String)
    gmsh.initialize()
    gmsh.open(filename1)
 
    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    # sp = RegularGrid(x,y,z,n = 1,Œ≥ = 5)
    integrationOrder_Œ© = 5
    integrationOrder_Œì = 5
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    gmsh.open(filename2)
    entities = getPhysicalGroups()
    nodes_p = getùëø·µ¢()
    n·µñ = length(nodes_p)
    x·µñ = nodes_p.x
    y·µñ = nodes_p.y
    z·µñ = nodes_p.z
    # s, varùê¥ = cal_area_support(nodes_p)
    # s = 1.5*s*ones(n·µñ)
    # gmsh.open(filename1)
    elements["Œ©·µñ"] = getElements(nodes_p, entities["Œ©"],  integrationOrder_Œ©)
    elements["Œì·µç·µñ"] = getElements(nodes_p, entities["Œì·µç"],  integrationOrder_Œì)
    elements["Œ©·µç·µñ"] = getElements(nodes_p, entities["Œ©"],  integrationOrder_Œ©·µç)
    push!(elements["Œ©·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç·µñ"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # gmsh.finalize()
    return elements, nodes, nodes_p
end
function import_cantilever_fem(filename::String)
    gmsh.initialize()
    gmsh.open(filename)

    entities = getPhysicalGroups()
    nodes = getùëø·µ¢()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    integrationOrder_Œ© = 10
    integrationOrder_Œì = 10
    integrationOrder_Œ©·µç =10
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Œ©"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©)
    elements["Œì·µç"] = getElements(nodes, entities["Œì·µç"],   integrationOrder_Œì)
    elements["Œì·µó"] = getElements(nodes, entities["Œì·µó"],   integrationOrder_Œì)
    elements["Œ©·µç"] = getElements(nodes, entities["Œ©"],   integrationOrder_Œ©·µç)
    push!(elements["Œ©"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œ©·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µó"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    push!(elements["Œì·µç"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    
    # type = PiecewiseParametric{:Bubble,:Tri3}
      type = PiecewiseParametric{:Bubble,:Quad}
    elements["Œ©·µá"] = getPiecewiseElements(entities["Œ©"], type, integrationOrder_Œ©)
    push!(elements["Œ©·µá"], :ùù≠=>:ùë†, :‚àÇùù≠‚àÇx=>:ùë†, :‚àÇùù≠‚àÇy=>:ùë†)
    # gmsh.finalize()
    return elements, nodes
end
prescribeForGauss = quote
   
    
    prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œ©·µç"],:v=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    prescribe!(elements["Œ©·µç"],:‚àÇu‚àÇx=>(x,y,z)->-P/EI*(L-x)*y)
    prescribe!(elements["Œ©·µç"],:‚àÇu‚àÇy=>(x,y,z)->-P/6/EI*((6*L-3*x)*x + (2+ŒΩ)*(3*y^2-D^2/4)))
    prescribe!(elements["Œ©·µç"],:‚àÇv‚àÇx=>(x,y,z)->P/6/EI*((6*L-3*x)*x - 3*ŒΩ*y^2 + (4+5*ŒΩ)*D^2/4))
    prescribe!(elements["Œ©·µç"],:‚àÇv‚àÇy=>(x,y,z)->P/EI*(L-x)*y*ŒΩ)

end

    

prescribeForPenalty = quote


 
    prescribe!(elements["Œì·µó"],:t‚ÇÅ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µó"],:t‚ÇÇ=>(x,y,z)->P/2/I*(D^2/4-y^2)) 
    prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    # prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÅ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÇ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÅ=>(x,y,z)->1.0)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÇ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

end

prescribeForSquare = quote

    prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->-P*(y-L/2)/6/EI*((6*L-3x)*x + (2+ŒΩ)*((y-L/2)^2-D^2/4)))
    prescribe!(elements["Œ©·µç"],:v=>(x,y,z)->P/6/EI*(3*ŒΩ*(y-L/2)^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    prescribe!(elements["Œ©·µç"],:‚àÇu‚àÇx=>(x,y,z)->-P/EI*(L-x)*(y-L/2))
    prescribe!(elements["Œ©·µç"],:‚àÇu‚àÇy=>(x,y,z)->-P/6/EI*((6*L-3*x)*x + (2+ŒΩ)*(3*(y-L/2)^2-D^2/4)))
    prescribe!(elements["Œ©·µç"],:‚àÇv‚àÇx=>(x,y,z)->P/6/EI*((6*L-3*x)*x - 3*ŒΩ*(y-L/2)^2 + (4+5*ŒΩ)*D^2/4))
    prescribe!(elements["Œ©·µç"],:‚àÇv‚àÇy=>(x,y,z)->P/EI*(L-x)*(y-L/2)*ŒΩ)


    prescribe!(elements["Œì·µó"],:t‚ÇÅ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µó"],:t‚ÇÇ=>(x,y,z)->P/2/I*(D^2/4-(y-L/2)^2)) 
    prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->-P*(y-L/2)/6/EI*((6*L-3x)*x + (2+ŒΩ)*((y-L/2)^2-D^2/4)))
    prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*(y-L/2)^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    # prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÅ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÇ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÅ=>(x,y,z)->1.0)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÇ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

    
end



prescribeForDisplacement = quote
    prescribe!(elements["Œì·µó"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œì·µó"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2)) 
    prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    prescribe!(elements["Œì‚ÇÅ"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œì‚ÇÅ"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2)) 
    prescribe!(elements["Œì‚ÇÉ"],:g‚ÇÅ=>(x,y,z)->-P*y/6/EI*((6*L-3x)*x + (2+ŒΩ)*(y^2-D^2/4)))
    prescribe!(elements["Œì‚ÇÉ"],:g‚ÇÇ=>(x,y,z)->P/6/EI*(3*ŒΩ*y^2*(L-x) + (4+5*ŒΩ)*D^2*x/4 + (3*L-x)*x^2))
    # prescribe!(elements["Œì·µç"],:g‚ÇÅ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç"],:g‚ÇÇ=>(x,y,z)->0.0)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÅ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:p‚ÇÇ=>(x,y,z)->-P/EI*(L-x)*y/2)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÅ=>(x,y,z)->1.0)
    # prescribe!(elements["Œì·µç·µñ"],:n‚ÇÇ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µç"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

    prescribe!(elements["Œì‚ÇÅ"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì‚ÇÅ"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì‚ÇÅ"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

    prescribe!(elements["Œì·µó"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì·µó"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì·µó"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)

    prescribe!(elements["Œì‚ÇÉ"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
    prescribe!(elements["Œì‚ÇÉ"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
    prescribe!(elements["Œì‚ÇÉ"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)




    
end

function cal_area_support(elms::Vector{ApproxOperator.AbstractElement})
    ùê¥s = zeros(length(elms))
    for (i,elm) in enumerate(elms)
        x‚ÇÅ = elm.ùìí[1].x
        y‚ÇÅ = elm.ùìí[1].y
        x‚ÇÇ = elm.ùìí[2].x
        y‚ÇÇ = elm.ùìí[2].y
        x‚ÇÉ = elm.ùìí[3].x
        y‚ÇÉ = elm.ùìí[3].y
        ùê¥s[i] = 0.5*(x‚ÇÅ*y‚ÇÇ + x‚ÇÇ*y‚ÇÉ + x‚ÇÉ*y‚ÇÅ - x‚ÇÇ*y‚ÇÅ - x‚ÇÉ*y‚ÇÇ - x‚ÇÅ*y‚ÇÉ)
    end
    avgùê¥ = mean(ùê¥s)
    varùê¥ = var(ùê¥s)
    s = (4/3^0.5*avgùê¥)^0.5
    return s, varùê¥
end