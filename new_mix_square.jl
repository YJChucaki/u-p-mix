using ApproxOperator, Tensors, JLD,LinearAlgebra, GLMakie, CairoMakie, Printf,Pardiso
# NP=[40,80,120,140]
# for n=1:4
    # i=NP[n]
ndiv= 6
#  ndiv_p=8
i= 20
# 40,60-3
# 80-4
# 100,120-5
# 160,200-7

include("import_prescrible_ops.jl")
include("import_cantilever.jl")
include("wirteVTK.jl")
# elements, nodes ,nodes_p ,x·µñ,y·µñ,z·µñ, sp,type= import_cantilever_mix("./msh/square_quad_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p ,x·µñ,y·µñ,z·µñ, sp,type= import_cantilever_mix("./msh/square_quad8_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(i)*".msh")
elements, nodes ,nodes_p ,Œ©,x·µñ,y·µñ,z·µñ, sp,type = import_cantilever_mix("./msh/square_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(i)*".msh")
# elements, nodes ,nodes_p ,x·µñ,y·µñ,z·µñ, sp,type= import_cantilever_mix("./msh/square_tri6_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(i)*".msh")
# elements, nodes = import_cantilever_Q4P1("./msh/square_quad_"*string(ndiv)*".msh")
# elements, nodes = import_cantilever_Q8P3("./msh/square_quad8_"*string(ndiv)*".msh")
# elements, nodes ,nodes_p = import_cantilever_mix("./msh/square_tri6_"*string(ndiv)*".msh","./msh/square_"*string(ndiv)*".msh")
# elements, nodes ,nodes_p = import_cantilever_T6P3("./msh/square_tri6_"*string(ndiv)*".msh","./msh/square_"*string(ndiv)*".msh")   

n·µ§ = length(nodes)
n‚Çö = length(nodes_p)
n‚Çë = length(elements["Œ©"])
n‚Çë‚Çö = length(Œ©)
    ##for Q4P1 
    # n‚Çö = length(elements["Œ©·µñ"])
    ##for Q8P3 
    # n‚Çö = 3*length(elements["Œ©·µñ"])
    n‚Çò=21
    P = 1000
    EÃÑ = 3e6
    # EÃÑ = 1.0
    # ŒΩÃÑ = 0.4999999
    ŒΩÃÑ = 0.3
    E = EÃÑ/(1.0-ŒΩÃÑ^2)
    ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)
    L = 10
    D = 10
    I = D^3/12
    EI = E*I
    K=EÃÑ/3/(1-2ŒΩÃÑ )
    eval(prescribeForSquare)
    setùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©·µç"])
    setùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç"])
    setùù≠!(elements["Œì·µó"])
    # setùù≠!(elements["Œì·µç·µñ"])
   

    

    eval(opsupmix)
    k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
    k‚Çö·µ§ = zeros(n‚Çö,2*n·µ§)
    k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
    f = zeros(2*n·µ§)
    fp= zeros(n‚Çö)
    opsup[3](elements["Œ©"],k·µ§·µ§)
    opsup[4](elements["Œ©"],elements["Œ©·µñ"],k‚Çö·µ§)
    opsup[5](elements["Œ©·µñ"],k‚Çö‚Çö)
    opsup[6](elements["Œì·µó"],f)
    Œ±·µ• = 1e9


    eval(opsPenalty)
    opsŒ±[1](elements["Œì·µç"],k·µ§·µ§,f)
    # opsŒ±[2](elements["Œì·µç"],elements["Œì·µç·µñ"],k·µ§‚Çö,fp)

    
    k = [k·µ§·µ§ k‚Çö·µ§';k‚Çö·µ§ k‚Çö‚Çö]
    f = [f;fp]

    d = k\f
    d‚ÇÅ = d[1:2:2*n·µ§]
    d‚ÇÇ = d[2:2:2*n·µ§]
    q  = d[2*n·µ§+1:end]
    push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
    push!(nodes_p,:q=>q)

    # k·µà = k·µ§·µ§
    # k·µõ = -k‚Çö·µ§'*(k‚Çö‚Çö\k‚Çö·µ§)
    # v·µà = eigvals(k·µà)
    # v·µõ = eigvals(k·µõ)
    # Œ≥ = eigvals(k·µõ,k·µà)
    # println(Œ≥[2*n·µ§-n‚Çö+1])

    h1,l2,h1_dil,h1_dev = opsup[8](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
    # h1,l2 = opsup[8](elements["Œ©"],elements["Œ©·µñ"])
    L2 = log10(l2)
    H1 = log10(h1)
    # H1_dil = log10(h1_dil)
    # H1_dev = log10(h1_dev)
   
    println(L2,H1)
    # println(H1_dil,H1_dev)
    # println(l2,h1)
    # println(h1_dil,h1_dev)
    # h = log10(10.0/ndiv)
    eval(VTK_mix_pressure)