
using ApproxOperator, Tensors,  LinearAlgebra, Printf
include("import_heat_conduction.jl")
include("wirteVTK.jl")
# for i=2:10
   
ndiv = 3
ndiv2 = 11
# n‚Çö = 15
# println(n‚Çö)
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_"*string(ndiv2)*".msh")

n‚Çö = length(nodes_p)
n·µ§ = length(nodes)
# n‚Çë = length(elements["Œ©"])
# n‚Çë‚Çö = length(Œ©)


set‚àáùù≠!(elements["Œ©·µò"])
set‚àáùù≠!(elements["Œ©·µñ"])
setùù≠!(elements["Œì·µñ"])
set‚àáùù≠!(elements["Œì·µò"])
D=1   #thermal conductivity coefficient
t=1 #thickness

n =1
T(x,y) = (x+y)^n
‚àÇT‚àÇx(x,y) = n*(x+y)^abs(n-1)
‚àÇT‚àÇy(x,y) = n*(x+y)^abs(n-1)
‚àÇ¬≤T‚àÇx¬≤(x,y)  = n*(n-1)*(x+y)^abs(n-2)
‚àÇ¬≤T‚àÇy¬≤(x,y) = n*(n-1)*(x+y)^abs(n-2)
b(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))

eval(prescribe)

ops = [
       Operator{:‚à´T·µ¢h·µ¢ds}(:t=>t),
       Operator{:‚à´T·µ¢g·µ¢ds}(:Œ±=>1e12*D,:t=>t),
       Operator{:‚à´vbdŒ©}(),
       Operator{:L‚ÇÇ}(),
]
ops·µõ = [
    Operator{:‚à´‚à´p·µ¢‚àáu‚±ºdxdy}(),
    Operator{:‚à´p·µ¢n·µ¢g‚±ºds}(),
]
ops·µà = [
    Operator{:‚à´‚à´p·µ¢D‚Åª¬πp‚±ºdxdy}(:D=>D,:t=>t),
]

k·µÖ = zeros(n·µ§,n·µ§)
f·µÖ = zeros(n·µ§)
k‚Çö‚Çö = zeros(2*n‚Çö,2*n‚Çö)
k‚Çö‚Çô = zeros(2*n‚Çö,n·µ§)
k‚Çö·µ§ = zeros(n·µ§,2*n‚Çö)
k·µ§·µ§ = zeros(n·µ§,n·µ§)
f·µ§ = zeros(n·µ§)
f‚Çö = zeros(2*n‚Çö)


ops·µà[1](elements["Œ©·µñ"],k‚Çö‚Çö)
ops·µõ[1](elements["Œ©·µñ"],elements["Œ©·µò"],k‚Çö·µ§)
ops·µõ[2](elements["Œì·µñ"],elements["Œì·µò"],k‚Çö‚Çô,f‚Çö)
ops[3](elements["Œ©·µò"],f·µ§)




k = [k‚Çö‚Çö -k‚Çö·µ§'-k‚Çö‚Çô;-k‚Çö·µ§-k‚Çö‚Çô' k·µ§·µ§]
f = [-f‚Çö;f·µ§]
d = k\f
p‚ÇÅ = d[1:2:2*n‚Çö] 
p‚ÇÇ = d[2:2:2*n‚Çö]
u  = d[2*n‚Çö+1:end]

push!(nodes_p,:d‚ÇÅ=>p‚ÇÅ,:d‚ÇÇ=>p‚ÇÇ)
push!(nodes,:d=>u)


setùù≠!(elements["Œ©·µç·µò"])
l2= ops[4](elements["Œ©·µç·µò"])
L2 = log10(l2)

           
println(L2)

# eval(VTK_mix_pressure)

d‚Çö·µ§ = zeros(2*n‚Çö + n·µ§)
d‚Çö = zeros(2*n‚Çö)
d·µ§ = zeros(n·µ§)
for (i,node) in enumerate(nodes_p)
    x = node.x
    y = node.y
    d‚Çö·µ§[2*i-1] = - ‚àÇT‚àÇx(x,y)
    d‚Çö·µ§[2*i]   = - ‚àÇT‚àÇy(x,y)
    d‚Çö[2*i-1] = - ‚àÇT‚àÇx(x,y)
    d‚Çö[2*i]   = - ‚àÇT‚àÇy(x,y)
end
for (i,node) in enumerate(nodes)
    x = node.x
    y = node.y
    d‚Çö·µ§[2*n‚Çö+i] = T(x,y)
    d·µ§[i] = T(x,y)
end

err1 = k‚Çö‚Çö*d‚Çö - k‚Çö·µ§'*d·µ§
err2 = k‚Çö‚Çô*d·µ§ - f‚Çö
err3 = -(k‚Çö·µ§+k‚Çö‚Çô')*d‚Çö-f·µ§
err4 = k‚Çö‚Çö*d‚Çö -(k‚Çö·µ§'+k‚Çö‚Çô)*d·µ§ + f‚Çö
err5 = k*d‚Çö·µ§-f
err6 = k*d-f
