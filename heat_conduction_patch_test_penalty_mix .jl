
using ApproxOperator, Tensors,  LinearAlgebra, Printf
include("import_heat_conduction.jl")
include("wirteVTK.jl")
# for i=2:10
   
ndiv =3
n‚Çö = 5
# println(n‚Çö)
elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")

n·µ§ = length(nodes)
n‚Çö = length(nodes_p)
n‚Çë = length(elements["Œ©"])
# n‚Çë‚Çö = length(Œ©)


set‚àáùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©·µñ"])
set‚àáùù≠!(elements["Œì"])
D=1   #thermal conductivity coefficient
t=1 #thickness

n = 3
T(x,y) = (x+y)^n
‚àÇT‚àÇx(x,y) = n*(x+y)^abs(n-1)
‚àÇT‚àÇy(x,y) = n*(x+y)^abs(n-1)
‚àÇ¬≤T‚àÇx¬≤(x,y)  = n*(n-1)*(x+y)^abs(n-2)
‚àÇ¬≤T‚àÇy¬≤(x,y) = n*(n-1)*(x+y)^abs(n-2)
s(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))

eval(prescribe)

ops = [
       Operator{:‚à´T·µ¢h·µ¢ds}(:t=>t),
       Operator{:‚à´T·µ¢g·µ¢ds}(:Œ±=>1e12*D,:t=>t),
       Operator{:‚à´‚à´T·µ¢s·µ¢dxdy}(:t=>t),
       Operator{:T_error}(:D=>D,:t=>t),
]
ops·µõ = [
    Operator{:‚à´‚à´q·µ¢‚àáT‚±ºdxdy}(:t=>t),
]
ops·µà = [
    Operator{:‚à´‚à´q·µ¢D‚Åª¬πq‚±ºdxdy}(:D=>D,:t=>t),
]

k·µÖ = zeros(n‚Çö,n‚Çö)
f·µÖ = zeros(n‚Çö)
k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
k‚Çö·µ§ = zeros(n‚Çö,2*n·µ§)
k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)


ops·µà[1](elements["Œ©"],k·µ§·µ§)
ops·µõ[1](elements["Œ©"],elements["Œ©·µñ"],k‚Çö·µ§)
ops[3](elements["Œ©·µñ"],f)
k‚Çö·µ§‚Åª=k‚Çö·µ§'*inv(k‚Çö·µ§*k‚Çö·µ§')
k‚Çê=-k·µ§·µ§*k‚Çö·µ§‚Åª
k=(k‚Çê'*inv(k‚Çê*k‚Çê'))*(k‚Çö·µ§')
ops[2](elements["Œì"],k·µÖ,f)
 q = (k+k·µÖ)\f #temperatures

# k = [k·µ§·µ§ (k‚Çö·µ§+k·µÖ)';k‚Çö·µ§+k·µÖ k‚Çö‚Çö]
# k = [k·µ§·µ§ k‚Çö·µ§';k‚Çö·µ§ k‚Çö‚Çö+k·µÖ]
# f = [zeros(2*n·µ§);f+f·µÖ]
# d = k\f
# d‚ÇÅ = d[1:2:2*n·µ§] ##heat flux
# d‚ÇÇ = d[2:2:2*n·µ§]
# q  = d[2*n·µ§+1:end]

# push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
push!(nodes_p,:T=>q)


setùù≠!(elements["Œ©·µç·µñ"])
l2= ops[4](elements["Œ©·µç·µñ"])
# h1,l2,h1_dil,h1_dev= ops[5](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
L2 = log10(l2)
# H1 = log10(h1)
# H1_dil = log10(h1_dil)
# H1_dev = log10(h1_dev)
           
println(L2)

# eval(VTK_mix_pressure)


