using ApproxOperator, Tensors, JLD

include("import_patch_test.jl")
include("import_prescrible_ops.jl")
# elements, nodes = import_patchtest_fem("./msh/patchtest.msh")
elements, nodes = import_patchtest_fem("./msh/patchtest.msh")

n·µ§ = length(nodes)


E = 3e6
ŒΩ=0.3
# ŒΩ=0.49999999999999
EÃÑ = E/(1-ŒΩ^2)
ŒΩÃÑ = ŒΩ/(1-ŒΩ)

# u(x,y) =  2*x*y+x^2+y^2
# v(x,y) = -2*x*y-x^2-y^2
# ‚àÇu‚àÇx(x,y) = 2*x+2*y
# ‚àÇu‚àÇy(x,y) = 2*x+2*y
# ‚àÇv‚àÇx(x,y) = -2*x-2*y
# ‚àÇv‚àÇy(x,y) = -2*x-2*y
# ‚àÇ¬≤u‚àÇx¬≤(x,y) = 2.0
# ‚àÇ¬≤u‚àÇx‚àÇy(x,y) = 2.0
# ‚àÇ¬≤u‚àÇy¬≤(x,y) = 2.0
# ‚àÇ¬≤v‚àÇx¬≤(x,y) = -2.0
# ‚àÇ¬≤v‚àÇx‚àÇy(x,y) = -2.0
# ‚àÇ¬≤v‚àÇy¬≤(x,y) = -2.0
n = 3
u(x,y) = (x+y)^n
v(x,y) = -(x+y)^n
‚àÇu‚àÇx(x,y) = n*(x+y)^abs(n-1)
‚àÇu‚àÇy(x,y) = n*(x+y)^abs(n-1)
‚àÇv‚àÇx(x,y) = -n*(x+y)^abs(n-1)
‚àÇv‚àÇy(x,y) = -n*(x+y)^abs(n-1)


setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©·µç"])
setùù≠!(elements["Œì¬π"])
setùù≠!(elements["Œì¬≤"])
setùù≠!(elements["Œì¬≥"])
setùù≠!(elements["Œì‚Å¥"])

eval(opsFEM)
k = zeros(2*n·µ§,2*n·µ§)
kŒ± = zeros(2*n·µ§,2*n·µ§)
f = zeros(2*n·µ§)
opsFEM[1](elements["Œ©"],k)

Œ±·µ• = 1e9
eval(opsPenalty)

opsŒ±[1](elements["Œì¬π"],kŒ±,f)
opsŒ±[1](elements["Œì¬≤"],kŒ±,f)
opsŒ±[1](elements["Œì¬≥"],kŒ±,f)
opsŒ±[1](elements["Œì‚Å¥"],kŒ±,f)

d = (k+kŒ±)\f
d‚ÇÅ = d[1:2:2*n·µ§]
d‚ÇÇ = d[2:2:2*n·µ§]

push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)

h1,l2= opsFEM[2](elements["Œ©·µç"])
L2 = log10(l2)
H1 = log10(h1)
println(L2,H1)