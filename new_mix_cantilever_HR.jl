using ApproxOperator, Tensors, JLD,LinearAlgebra, GLMakie, CairoMakie, Printf, Pardiso

ndiv=6
i= 16
# ndiv_p=4
include("import_prescrible_ops.jl")                       
include("import_cantilever.jl")
include("wirteVTK.jl")

# elements, nodes, nodes_p, Œ©  = import_cantilever_mix_HR("./msh/cantilever_HR_"*string(ndiv)*".msh","./msh/cantilever_bubble_"*string(i)*".msh")
# elements, nodes, Œ©  = import_cantilever_mix_HR("./msh/cantilever.msh","./msh/cantilever_bubble_"*string(i)*".msh")
elements, nodes ,nodes_p,Œ© = import_cantilever_mix_HR("./msh/cantilever_square_"*string(ndiv)*".msh","./msh/cantilever_square_bubble_"*string(i)*".msh")
    n‚Çë = length(elements["Œ©"])
    n·µ§ = length(nodes)
    n‚Çö = length(nodes_p)
    n‚Çõ = 3*n‚Çë
    n‚Çë‚Çö = length(Œ©)
    ##for Q4P1 
    # n‚Çö = length(elements["Œ©·µñ"])
    ##for Q8P3
    # n‚Çö = 3*length(elements["Œ©·µñ"])
    P = 1000
    EÃÑ = 3e6
    # EÃÑ = 1.0
    ŒΩÃÑ = 0.499999999
    # ŒΩÃÑ = 0.3
    E = EÃÑ/(1.0-ŒΩÃÑ^2)
    ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)
    L = 1
    D = 1
    I = D^3/12
    EI = E*I
    K=EÃÑ/3/(1-2ŒΩÃÑ )
    eval(prescribeForGauss)
    eval(prescribeForPenalty)
    setùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©"])
    set‚àáùù≠!(elements["Œ©·µç"])
    setùù≠!(elements["Œ©À¢"])
    setùù≠!(elements["Œ©·µñ"])
    setùù≠!(elements["Œ©·µç·µñ"])
    setùù≠!(elements["Œì·µç"])
    setùù≠!(elements["Œì·µó"])
    setùù≠!(elements["Œì·µñ"])
    setùù≠!(elements["ŒìÀ¢"])
    # setùù≠!(elements["Œì·µç·µñ"])
   
ops·µñ = [
    Operator{:‚à´‚à´qpdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
    Operator{:‚à´‚à´p‚àávdxdy}(),
    Operator{:‚à´pn·µ¢g·µ¢ds}(),
]

opsÀ¢ = [
    Operator{:‚à´‚à´Œ¥s·µ¢‚±ºs·µ¢‚±ºdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
    Operator{:‚à´‚à´s·µ¢‚±ºŒµ·µ¢‚±ºdxdy}(),
    Operator{:‚à´s·µ¢‚±ºn‚±ºg·µ¢ds}(),
]

ops = [
    Operator{:‚à´v·µ¢t·µ¢ds}(),
    Operator{:‚à´‚à´v·µ¢b·µ¢dxdy}(),
    Operator{:H‚Çë_PlaneStress}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
    Operator{:‚à´‚à´Œµ·µ¢‚±ºœÉ·µ¢‚±ºdxdy}(:E=>E,:ŒΩ=>ŒΩ),
    Operator{:‚à´v·µ¢g·µ¢ds}(:Œ±=>1e10*E),
    Operator{:H‚Çë_up_mix}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
]
  
    
k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
k‚Çö·µ§ = zeros(n‚Çö,2*n·µ§)
k‚Çõ·µ§ = zeros(4*n‚Çõ,2*n·µ§)
k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
k‚Çõ‚Çõ = zeros(4*n‚Çõ,4*n‚Çõ)
f·µ§ = zeros(2*n·µ§)
f‚Çö = zeros(n‚Çö)
f‚Çõ = zeros(4*n‚Çõ)
d·µ§ = zeros(2*n·µ§)
d‚Çö = zeros(n‚Çö)
d‚Çõ = zeros(4*n‚Çõ)
    
ops·µñ[1](elements["Œ©·µñ"],k‚Çö‚Çö)
ops·µñ[2](elements["Œ©"],elements["Œ©·µñ"],k‚Çö·µ§)
ops·µñ[3](elements["Œì·µç"],elements["Œì·µñ"],k‚Çö·µ§,f‚Çö)

opsÀ¢[1](elements["Œ©À¢"],k‚Çõ‚Çõ)
opsÀ¢[2](elements["Œ©"],elements["Œ©À¢"],k‚Çõ·µ§)
opsÀ¢[3](elements["Œì·µç"],elements["ŒìÀ¢"],k‚Çõ·µ§,f‚Çõ)

ops[1](elements["Œì·µó"],f·µ§)

k = [zeros(2*n·µ§,2*n·µ§) k‚Çö·µ§' k‚Çõ·µ§';
     k‚Çö·µ§ k‚Çö‚Çö zeros(n‚Çö,4*n‚Çõ);
     k‚Çõ·µ§ zeros(4*n‚Çõ,n‚Çö) k‚Çõ‚Çõ]
f = [f·µ§;f‚Çö;f‚Çõ]
    d = k\f
    
d‚ÇÅ = d[1:2:2*n·µ§]
d‚ÇÇ = d[2:2:2*n·µ§]
q  = d[2*n·µ§+1:2*n·µ§+n‚Çö]
push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
push!(nodes_p,:q=>q)

    # push!(nodes_p,:q=>q)

    # h1,l2,h1_dil,h1_dev = opsup[8](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
    h1,l2 = ops[6](elements["Œ©·µç"],elements["Œ©·µç·µñ"])
    # h1,l2 = ops[9](elements["Œ©·µç"])
    L2 = log10(l2)
    H1 = log10(h1)
    # H1_dil = log10(h1_dil)
    # H1_dev = log10(h1_dev)
   
    println(L2,H1)
    # println(H1_dil,H1_dev)
    # println(l2,h1)
    # println(h1_dil,h1_dev)
    # h = log10(10.0/ndiv)

    

    eval(VTK_mix_pressure)
    # eval(VTK_mix_pressure_u)
    # eval(VTK_mix_displacement)
    # eval(VTK_Q4P1_displacement_pressure)
    # eval(VTK_T6P3_pressure)


