
using ApproxOperator, Tensors,  LinearAlgebra, Printf
include("import_plate_with_hole.jl")
include("wirteVTK.jl")
# for i=2:10
   
ndiv = 6
ndiv2 =3
# n‚Çö = 15
# println(n‚Çö)
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
elements,nodes,nodes_p= import_patchtest_mix_old("./msh/plate_with_hole_"*string(ndiv)*".msh","./msh/plate_with_hole_"*string(ndiv2)*".msh")

n‚Çö = length(nodes_p)
n·µ§ = length(nodes)
# n‚Çë = length(elements["Œ©"])
# n‚Çë‚Çö = length(Œ©)


set‚àáùù≠!(elements["Œ©·µò"])

setùù≠!(elements["Œì¬π·µó·µò"])
setùù≠!(elements["Œì¬≤·µó·µò"])
setùù≠!(elements["Œì¬π·µç·µò"])
setùù≠!(elements["Œì¬≤·µç·µò"])
setùù≠!(elements["Œì¬≥·µç·µò"])
set‚àáùù≠!(elements["Œ©·µñ"])

setùù≠!(elements["Œì¬π·µó·µñ"])
setùù≠!(elements["Œì¬≤·µó·µñ"])
setùù≠!(elements["Œì¬π·µç·µñ"])
setùù≠!(elements["Œì¬≤·µç·µñ"])
setùù≠!(elements["Œì¬≥·µç·µñ"])
D=1   #thermal conductivity coefficient
t=1 #thickness
R = 1.0
r(x,y) = (x^2+y^2)^0.5
Œ∏(x,y) = atan(y/x)
a‚ÇÄ = 249.9977
a‚ÇÅ = 24.23894
a‚ÇÇ = 0.000025
a‚ÇÉ = -0.141899
a‚ÇÑ = 0.00007
n =1
# T(x,y) = 0.5*a‚ÇÄ+a‚ÇÅ*(r(x,y)+R^2/r(x,y))*cos(Œ∏(x,y))+a‚ÇÇ*(r(x,y)^2+R^4/r(x,y)^2)*cos(2*Œ∏(x,y))+a‚ÇÉ*(r(x,y)^3+R^6/r(x,y)^3)*cos(3*Œ∏(x,y))+a‚ÇÑ*(r(x,y)^4+R^8/r(x,y)^4)*cos(4*Œ∏(x,y))
# T(x,y) = 0.5*a‚ÇÄ+a‚ÇÅ*(r(x,y)+R^2/r(x,y))*cos(Œ∏(x,y))
# ‚àÇT‚àÇx(x,y) = a‚ÇÅ*(2*x-2*x/(x^2+y^2)^2)/(1+y^2/x^2)^0.5+a‚ÇÅ*(x^2+y^2+1/(x^2+y^2))*y^2/((1+y^2/x^2)^1.5*x^3)
# ‚àÇT‚àÇy(x,y) = a‚ÇÅ*(2*y-2*y/(x^2+y^2)^2)/(1+y^2/x^2)^0.5+a‚ÇÅ*(x^2+y^2+1/(x^2+y^2))*y/((1+y^2/x^2)^1.5*x^2)
T(x,y) = (x+y)^n
‚àÇT‚àÇx(x,y) = n*(x+y)^abs(n-1)
‚àÇT‚àÇy(x,y) = n*(x+y)^abs(n-1)
P‚ÇÅ(x,y) = -‚àÇT‚àÇx(x,y)
P‚ÇÇ(x,y) = -‚àÇT‚àÇy(x,y)
‚àÇ¬≤T‚àÇx¬≤(x,y)  = n*(n-1)*(x+y)^abs(n-2)
‚àÇ¬≤T‚àÇy¬≤(x,y) = n*(n-1)*(x+y)^abs(n-2)
b(x,y) = -D*(‚àÇ¬≤T‚àÇx¬≤(x,y)+‚àÇ¬≤T‚àÇy¬≤(x,y))

eval(prescribe)


ops = [
       Operator{:‚à´T·µ¢h·µ¢ds}(:t=>t),
       Operator{:‚à´T·µ¢g·µ¢ds}(:Œ±=>1e12*D,:t=>t),
       Operator{:‚à´vbdŒ©}(),
       Operator{:L‚ÇÇ}(),
]
ops·µõ = [
    Operator{:‚à´‚à´p·µ¢‚àáu‚±ºdxdy}(),
    Operator{:‚à´p·µ¢n·µ¢g‚±ºds}(),
]
ops·µà = [
    Operator{:‚à´‚à´p·µ¢D‚Åª¬πp‚±ºdxdy}(:D=>D,:t=>t),
]

k·µÖ = zeros(n·µ§,n·µ§)
f·µÖ = zeros(n·µ§)
k‚Çö‚Çö = zeros(2*n‚Çö,2*n‚Çö)
k‚Çö‚Çô = zeros(2*n‚Çö,n·µ§)
k‚Çö·µ§ = zeros(n·µ§,2*n‚Çö)
k·µ§·µ§ = zeros(n·µ§,n·µ§)
f·µ§ = zeros(n·µ§)
f‚Çö = zeros(2*n‚Çö)


ops·µà[1](elements["Œ©·µñ"],k‚Çö‚Çö)
ops·µõ[1](elements["Œ©·µñ"],elements["Œ©·µò"],k‚Çö·µ§)
ops·µõ[2](elements["Œì¬π·µç·µñ"],elements["Œì¬π·µç·µò"],k‚Çö‚Çô,f‚Çö)
ops·µõ[2](elements["Œì¬≤·µç·µñ"],elements["Œì¬≤·µç·µò"],k‚Çö‚Çô,f‚Çö)
ops·µõ[2](elements["Œì¬≥·µç·µñ"],elements["Œì¬≥·µç·µò"],k‚Çö‚Çô,f‚Çö)
ops·µõ[2](elements["Œì¬π·µó·µñ"],elements["Œì¬π·µó·µò"],k‚Çö‚Çô,f‚Çö)
ops·µõ[2](elements["Œì¬≤·µó·µñ"],elements["Œì¬≤·µó·µò"],k‚Çö‚Çô,f‚Çö)
ops[3](elements["Œ©·µò"],f·µ§)



# k‚Çö·µ§ = k‚Çö·µ§+k‚Çö‚Çô

k = [k‚Çö‚Çö -k‚Çö·µ§'-k‚Çö‚Çô;-k‚Çö·µ§-k‚Çö‚Çô' k·µ§·µ§]

# k = [k‚Çö‚Çö -k‚Çö·µ§;-k‚Çö·µ§' k·µ§·µ§]
f = [f‚Çö;-f·µ§]
d = k\f
p‚ÇÅ = d[1:2:2*n‚Çö] 
p‚ÇÇ = d[2:2:2*n‚Çö]
u  = d[2*n‚Çö+1:end]

push!(nodes_p,:d‚ÇÅ=>p‚ÇÅ,:d‚ÇÇ=>p‚ÇÇ)
push!(nodes,:d=>u)

setùù≠!(elements["Œ©·µç·µò"])
setùù≠!(elements["Œ©·µç·µñ"])
l2_u= ops[4](elements["Œ©·µç·µò"])
# l2_p= ops[5](elements["Œ©·µç·µñ"])
L2_u = log10(l2_u)
# L2_p = log10(l2_p)

           
println(L2_u)
# println(L2_p)
           


# eval(VTK_mix_pressure)

# d‚Çö·µ§ = zeros(2*n‚Çö + n·µ§)
# d‚Çö = zeros(2*n‚Çö)
# d·µ§ = zeros(n·µ§)
# for (i,node) in enumerate(nodes_p)
#     x = node.x
#     y = node.y
#     d‚Çö·µ§[2*i-1] = -‚àÇT‚àÇx(x,y)
#     d‚Çö·µ§[2*i]   = -‚àÇT‚àÇy(x,y)
#     d‚Çö[2*i-1] = -‚àÇT‚àÇx(x,y)
#     d‚Çö[2*i]   = -‚àÇT‚àÇy(x,y)
# end
# for (i,node) in enumerate(nodes)
#     x = node.x
#     y = node.y
#     d‚Çö·µ§[2*n‚Çö+i] = T(x,y)
#     d·µ§[i] = T(x,y)
# end

# err1 = k‚Çö‚Çö*d‚Çö - k‚Çö·µ§*d·µ§
# err2 = k‚Çö‚Çô*d·µ§ + f‚Çö
# err3 = (k‚Çö·µ§+k‚Çö‚Çô)'*d‚Çö-f·µ§
# err4 = k‚Çö‚Çö*d‚Çö - (k‚Çö·µ§+k‚Çö‚Çô)*d·µ§ + f‚Çö
# err5 = k*d‚Çö·µ§-f
# err6 = k*d-f
