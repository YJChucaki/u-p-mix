
using ApproxOperator, Tensors,  LinearAlgebra, JLD
include("import_patchtest.jl")
# for i=2:10
   
ndiv= 9
n‚Çö = 90
# println(n‚Çö)
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_bubble_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_quad_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_tri6_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
# elements,nodes,nodes_p = import_patchtest_mix("./msh/patchtest_quad8_"*string(ndiv)*".msh","./msh/patchtest_bubble_"*string(n‚Çö)*".msh")
# elements,nodes = import_patchtest_Q4P1("./msh/patchtest_quad_"*string(ndiv)*".msh")
# elements,nodes = import_patchtest_Q4R1("./msh/patchtest_quad_"*string(ndiv)*".msh")
# elements,nodes,nodes_p = import_patchtest_T6P3("./msh/patchtest_tri6_"*string(ndiv)*".msh","./msh/patchtest_"*string(ndiv)*".msh")
# elements,nodes = import_patchtest_Q8P3("./msh/patchtest_quad8_"*string(ndiv)*".msh")
n·µ§ = length(nodes)
# n‚Çö = length(nodes_p)

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œ©·µñ"])
setùù≠!(elements["Œì"])
EÃÑ = 1.0
ŒΩÃÑ = 0.4999999
# ŒΩÃÑ = 0.3
E = EÃÑ/(1.0-ŒΩÃÑ^2)
ŒΩ = ŒΩÃÑ/(1.0-ŒΩÃÑ)

prescribe!(elements["Œì¬π"],:g‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì¬π"],:g‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥"],:g‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥"],:g‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì¬π"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->0.0)
prescribe!(elements["Œì¬π"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì¬π"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥"],:n‚ÇÅ‚ÇÅ=>(x,y,z)->1.0)
prescribe!(elements["Œì‚Å¥"],:n‚ÇÅ‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚Å¥"],:n‚ÇÇ‚ÇÇ=>(x,y,z)->0.0)
prescribe!(elements["Œì¬≤"],:t‚ÇÅ=>(x,y,z)->1.0)
prescribe!(elements["Œì¬≤"],:t‚ÇÇ=>(x,y,z)->0.0)

ops = [
       Operator{:‚à´‚à´Œµ·µ¢‚±ºœÉ·µ¢‚±ºdxdy}(:E=>E,:ŒΩ=>ŒΩ),
       Operator{:‚à´v·µ¢t·µ¢ds}(),
       Operator{:‚à´v·µ¢g·µ¢ds}(:Œ±=>1e13*E),
       Operator{:‚à´‚à´v·µ¢b·µ¢dxdy}(),
       Operator{:H‚Çë_up_mix}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
       Operator{:H‚Çë_Incompressible}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ)
]
ops·µõ = [
    Operator{:‚à´‚à´p‚àávdxdy}(),
    Operator{:‚à´‚à´qpdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ),
]
ops·µà = [
    Operator{:‚à´‚à´Œµ·µà·µ¢‚±ºœÉ·µà·µ¢‚±ºdxdy}(:E=>EÃÑ,:ŒΩ=>ŒΩÃÑ )
]

k·µ§·µ§ = zeros(2*n·µ§,2*n·µ§)
k·µ§‚Çö = zeros(2*n·µ§,n‚Çö)
k‚Çö‚Çö = zeros(n‚Çö,n‚Çö)
f = zeros(2*n·µ§)


ops·µà[1](elements["Œ©"],k·µ§·µ§)


ops·µõ[1](elements["Œ©"],elements["Œ©·µñ"],k·µ§‚Çö)
ops·µõ[2](elements["Œ©·µñ"],k‚Çö‚Çö)
ops[3](elements["Œì¬π"],k·µ§·µ§,f)
ops[3](elements["Œì‚Å¥"],k·µ§·µ§,f)
ops[2](elements["Œì¬≤"],f)


k = [k·µ§·µ§ k·µ§‚Çö;k·µ§‚Çö' k‚Çö‚Çö]
f = [f;zeros(n‚Çö)]
d = k\f
d‚ÇÅ = d[1:2:2*n·µ§]
d‚ÇÇ = d[2:2:2*n·µ§]
p  = d[2*n·µ§+1:end]

push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ)
push!(nodes_p,:q=>p)

@save compress=true "jld/stability_tri3_"*string(n‚Çö)*".jld" d‚ÇÅ d‚ÇÇ p
